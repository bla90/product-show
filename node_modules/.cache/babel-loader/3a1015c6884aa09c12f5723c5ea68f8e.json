{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nconst config = {\n  apiKey: \"AIzaSyBfmZdYsBrXiAbIsxlRvl1Nq8aIFLAWXd0\",\n  authDomain: \"think-piece-d4578.firebaseapp.com\",\n  databaseURL: \"https://think-piece-d4578.firebaseio.com\",\n  projectId: \"think-piece-d4578\",\n  storageBucket: \"think-piece-d4578.appspot.com\",\n  messagingSenderId: \"514832167303\",\n  appId: \"1:514832167303:web:209364fbefdf030cb36322\",\n  measurementId: \"G-FZ8G4L5SFQ\"\n};\nfirebase.initializeApp(config);\nexport const firestore = firebase.firestore();\nexport const auth = firebase.auth();\nexport const storage = firebase.storage();\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport const signOut = () => auth.signOut();\nexport const createUserProfileDocument = async (user, additionalData) => {\n  if (!user) return; // Get a reference to the place in the database where a user profile might be.\n\n  const userRef = firestore.doc(`users/${user.uid}`); // Go and fetch the document from that location.\n\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = user;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user\", error.message);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\nexport const getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    return firestore.collection(\"users\").doc(uid);\n  } catch (error) {\n    console.error(\"Error fetching user\", error.message);\n  }\n};\nexport default firebase;","map":{"version":3,"sources":["C:/Users/neevs/Think-Piece/src/firebase.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","firestore","auth","storage","provider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","signOut","createUserProfileDocument","user","additionalData","userRef","doc","uid","snapshot","get","exists","displayName","email","photoURL","createdAt","Date","set","error","console","message","getUserDocument","collection"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,OAAO,kBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,mCAFC;AAGbC,EAAAA,WAAW,EAAE,0CAHA;AAIbC,EAAAA,SAAS,EAAE,mBAJE;AAKbC,EAAAA,aAAa,EAAE,+BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,SAAS,GAAGX,QAAQ,CAACW,SAAT,EAAlB;AACP,OAAO,MAAMC,IAAI,GAAGZ,QAAQ,CAACY,IAAT,EAAb;AACP,OAAO,MAAMC,OAAO,GAAGb,QAAQ,CAACa,OAAT,EAAhB;AAEP,OAAO,MAAMC,QAAQ,GAAG,IAAId,QAAQ,CAACY,IAAT,CAAcG,kBAAlB,EAAjB;AACP,OAAO,MAAMC,gBAAgB,GAAG,MAAMJ,IAAI,CAACK,eAAL,CAAqBH,QAArB,CAA/B;AACP,OAAO,MAAMI,OAAO,GAAG,MAAMN,IAAI,CAACM,OAAL,EAAtB;AAEP,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,IAAP,EAAaC,cAAb,KAAgC;AACvE,MAAI,CAACD,IAAL,EAAW,OAD4D,CAGvE;;AACA,QAAME,OAAO,GAAGX,SAAS,CAACY,GAAV,CAAe,SAAQH,IAAI,CAACI,GAAI,EAAhC,CAAhB,CAJuE,CAMvE;;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB,QAAmCV,IAAzC;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBL,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,QAHgB;AAIhBC,QAAAA,SAJgB;AAKhB,WAAGV;AALa,OAAZ,CAAN;AAOD,KARD,CAQE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAAK,CAACE,OAA3C;AACD;AACF;;AAED,SAAOC,eAAe,CAACjB,IAAI,CAACI,GAAN,CAAtB;AACD,CA1BM;AA4BP,OAAO,MAAMa,eAAe,GAAG,MAAOb,GAAP,IAAe;AAC5C,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;;AACV,MAAI;AACF,WAAOb,SAAS,CAAC2B,UAAV,CAAqB,OAArB,EAA8Bf,GAA9B,CAAkCC,GAAlC,CAAP;AACD,GAFD,CAEE,OAAOU,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAAK,CAACE,OAA3C;AACD;AACF,CAPM;AASP,eAAepC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBfmZdYsBrXiAbIsxlRvl1Nq8aIFLAWXd0\",\r\n  authDomain: \"think-piece-d4578.firebaseapp.com\",\r\n  databaseURL: \"https://think-piece-d4578.firebaseio.com\",\r\n  projectId: \"think-piece-d4578\",\r\n  storageBucket: \"think-piece-d4578.appspot.com\",\r\n  messagingSenderId: \"514832167303\",\r\n  appId: \"1:514832167303:web:209364fbefdf030cb36322\",\r\n  measurementId: \"G-FZ8G4L5SFQ\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const firestore = firebase.firestore();\r\nexport const auth = firebase.auth();\r\nexport const storage = firebase.storage();\r\n\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\nexport const signOut = () => auth.signOut();\r\n\r\nexport const createUserProfileDocument = async (user, additionalData) => {\r\n  if (!user) return;\r\n\r\n  // Get a reference to the place in the database where a user profile might be.\r\n  const userRef = firestore.doc(`users/${user.uid}`);\r\n\r\n  // Go and fetch the document from that location.\r\n  const snapshot = await userRef.get();\r\n\r\n  if (!snapshot.exists) {\r\n    const { displayName, email, photoURL } = user;\r\n    const createdAt = new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        photoURL,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return getUserDocument(user.uid);\r\n};\r\n\r\nexport const getUserDocument = async (uid) => {\r\n  if (!uid) return null;\r\n  try {\r\n    return firestore.collection(\"users\").doc(uid);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user\", error.message);\r\n  }\r\n};\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}